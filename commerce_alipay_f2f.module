<?php

/**
 * @file
 *  Alipay FACE TO FACE PAYMENT METHOD for Drupal Commerce
 */

/**
 * Implements hook_menu().
 */

define('CHARSET',"UTF-8");
define('GATEWAYURL',"https://openapi.alipay.com/gateway.do");


function commerce_alipay_f2f_menu() {
  // menu callback for processing notifications from Alipay
  $items['commerce/alipay_f2f/notify'] = array(
    'page callback' => 'commerce_alipay_f2f_notify_handler',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
 
function commerce_alipay_f2f_commerce_payment_method_info() {
  $payment_methods = array();

  // Declare Alipay payment method to redirect to external site.
  $payment_methods['alipay_f2f'] = array(
    'base' => 'commerce_alipay_f2f',
    'title' => t('Alipay Face 2 Face'),
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_alipay_f2f_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'apimethod' => 'alipay.trade.precreate',
    'seller_id' => '',
    'app_id' => '',
    'private_key' => '',
    'debug' => '',
    'alipay_pub_key' => '',
    'notify_url' => '',
  );
  // Declare form settings to configure the Alipay payment method.
  $form['apimethod'] = array(
    '#type' => 'select',
    '#title' => t('Payment service type'),
    '#description' => t('Payment methods.Currently only QR payment is supported'),
    '#default_value' => isset($settings['apimethod'])?$settings['apimethod']:'',
    '#options' => array(
      'alipay.trade.precreate' => t('QR Payment'),
    ),
    '#required' => TRUE,
  );
  
  $form['seller_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Seller ID'),
    '#description' => t('The seller email with which the Alipay account was registered for the corresponding type of service.'),
    '#default_value' => isset($settings['seller_id'])?$settings['seller_id']:'',
    '#required' => FALSE,
  );

  $form['app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('APP ID'),
    '#description' => t("Application ID created under your Alipay account."),
    '#default_value' => isset($settings['app_id'])?$settings['app_id']:'',
    '#required' => TRUE,
  );
  
  $form['notify_url'] = array(
	'#type' => 'textfield',
	'#title' => t('Notify Url'),
	'#description' => t('If you want to write your own handler for processing payment notifications from Alipay, input the url here'),
	'#default_value' => isset($settings['notify_url'])?$settings['notify_url']:$GLOBALS['base_url'].'/commerce/alipay_f2f/notify',
	'#required'	=> FALSE,
  
  
  );
 
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 1000,
    '#title' => t('Private RSA Key'),
    '#description' => t("The RSA Private Key that you generate and will be used to sign POST data from this server ."),
    '#default_value' => isset($settings['private_key'])?$settings['private_key']:'',
    '#required' => TRUE,
  );
  
  $form['alipay_pub_key'] = array(
	'#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 1000,
    '#description' => t("Alipay RSA public key, which should be found under your Alipay account."),
    '#default_value' => isset($settings['alipay_pub_key'])?$settings['alipay_pub_key']:'',
    '#required' => TRUE, 
  );

  $form['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug mode'),
    '#description' => t('This option will set the total amount of each order to 0.01 CNY.'),
    '#default_value' => isset($settings['debug'])?$settings['debug']:false,
  );
  
  

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_alipay_f2f_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form['alipay_information'] = array(
    '#markup' => '<span class="commerce-alipay-f2f-info">' . t('Continue') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 *
 */
function commerce_alipay_f2f_redirect_form($form, &$form_state, $order, $payment_method) {
	
	
	 drupal_add_js(drupal_get_path('module', 'commerce_alipay_f2f') . '/js/qrcode.min.js',
                            array('group' => JS_THEME, 'every_page' => TRUE));
     drupal_add_js(drupal_get_path('module', 'commerce_alipay_f2f') . '/js/commerce_alipay_f2f.js');

  $form = array();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  //$vpn_order = commerce_vpn_order_load($order->order_id);
  
  
  $product_ids = array();
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product_ids[] = $line_item_wrapper->commerce_product->raw();
    }
  }

  $pid = reset($product_ids);
  $product_title = commerce_product_load($pid)->title;    
  $site_name =  variable_get('site_name');
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  
  $line_items = $wrapper->commerce_line_items;
  $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  $total = commerce_line_items_total($line_items);
  
  $amount = $payment_method['settings']['debug'] ? '1.0' : $wrapper->commerce_order_total->amount->value();


  $settings = $payment_method['settings'];

  // The request data to be posted to Alipay to generate payment QRcode.
    $bizParas = array(
		'out_trade_no' => $order->order_number,
		'subject' => t('!site_name--!product', array('!site_name' => $site_name,'!product' => $product_title)),
		'body' => commerce_alipay_f2f_data_body($order),
		/*'goods_detail' => array(
		      array(
		        'goods_id' => 'p1',
		        'goods_name' => 'ipad',
		        'price'  => 1000,
		        'quantity' => 1,
		        ),
		      array(
		        'goods_id' => 'p2',
		        'goods_name' => 'ipad2',
		        'price'  => 2000,
		        'quantity' => 1,
		        ),
		),*/
		'extend_params' => ['sys_service_provider_id' => ''],
		'timeout_express' => '5m',
		'total_amount' => commerce_currency_amount_to_decimal($amount, 'CNY'),
		//'undiscountable_amount' => '0.10',
		//'store_id' => '',
		//'operator_id' => '',
		//'alipay_store_id' => '',
	);
	
    $apiParas = array(
    'app_id' => $settings['app_id'],
    'version' => '1.0',
    'format' => 'json',
    'sign_type'  => 'RSA',
    'method' => 'alipay.trade.precreate',
    'timestamp' => date("Y-m-d H:i:s"),
    'auth_token' => '',
    'notify_url' => $settings['notify_url'],
	'charset' => CHARSET,
	'terminal_type' => '',
	'terminal_info' => '',
	'prod_code' => '',
	'app_auth_token' => '',
  );

    module_load_include('php','commerce_alipay_f2f','include/f2fUtility');
	$utility = new f2fUtility();
	$utility->setBizContent($bizParas);
	$bizdata = $utility->getBizParas();

  
	$allparas = array_merge($apiParas,$bizdata);
   
	$pri_key = preg_replace('/\s*/','',$settings['private_key']);
	

	$apiParas['sign'] = $utility->rsaSign($allparas,$pri_key);
    $requestUrl = $utility->gatewayUrl . "?";
	$requestUrl .= $utility->urlEncode($apiParas);
	
	$postStrBody = $utility->urlEncode($bizdata);
  
	$header = array(
			'content-type' => 'application/x-www-form-urlencoded',
			'charset' => $utility->charset,
      
	);
	
		
	$res = drupal_http_request($requestUrl,array('method' => 'POST','data' => $postStrBody,'headers' => $header));
   //dpm($res);
   if($res->code == 200) {
	   
	     $data = json_decode($res->data);
	     
	     if(isset($data->alipay_trade_precreate_response->code) && $data->alipay_trade_precreate_response->code == 10000) {
			
			      watchdog("notice","payment QR code fetched successfully");
			      $aliResp = $data->alipay_trade_precreate_response;
			      drupal_add_js(array('commerce_alipay_f2f' => array('ali_qrcode' => $aliResp->qr_code),), 'setting');

		 }else{
			 
			  drupal_set_message('Failed to get payment QRcode','error');
		 }
   }else {
	   
	     drupal_set_message('A network error occurred!','error');
   }
  
  $form['#token'] = FALSE;

   $form['qrcode'] = array(
                    '#type' => 'markup',
                    '#markup' => "<div class='qrcode'></div>",
                    );
  
  
  return $form;
}

/**
 * Redirects the transaction to Alipay's payment gateway.
 */
function commerce_alipay_f2f_redirect($form, &$form_state) {
	
  form_state_values_clean($form_state);
  $data = drupal_http_build_query($form_state['values']);
  $form_state['redirect'] = ALIPAY_GATEWAY . $data;
}


function commerce_alipay_f2f_notify_handler() {



  if (empty($_POST)) {
    return FALSE;
  }else{
	  
	  $alipay_notify = $_POST;
  }
  
   if ($alipay_notify['trade_status'] == 'TRADE_FINISHED') {

            return;

    }
  
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $_POST['trade_no']));
 
   if (!empty($transactions)) {

       $transaction = reset($transactions);
       __transaction_status_is_lower($transaction->remote_status,$_POST['trade_status']);
       
    }
  
  $order = commerce_order_load($alipay_notify['out_trade_no']);

  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  
   if(commerce_alipay_f2f_notify_validate($order,$payment_method,$alipay_notify)) {
	   
	     watchdog('commerce_alipay_f2f','verfication succeed!');
	     commerce_alipay_f2f_notify_submit($order,$payment_method,$alipay_notify);
	     //output the string 'success' so that Alipay will not send the same notifcation any more
	     print 'success';
   }else {
	   
	   watchdog('commerce_alipay_f2f','verfication failed!');
   }
  
}

function __transaction_status_is_lower($current_status,$notify_status) {
	 
      $status_priority = array (
                        'WAIT_BUYER_PAY' => 1,
                        'WAIT_SELLER_SEND_GOODS' => 2,
                        'WAIT_BUYER_CONFIRM_GOODS' => 3,
                        'TRADE_FINISHED' => 4,
                        'TRADE_SUCCESS' => 4,
                      );
         
     if (isset($status_priority[$notify_status])) {
              
        if(($status_priority[$current_status] > $status_priority[$notify_status]) || ($notify_status == $current_status)) {
				
				      return TRUE;
			  }
	 }
			  return FALSE;
}

/**
 * Validation of Alipay's notifications.
 */
function commerce_alipay_f2f_notify_validate($order, $payment_method, $notify) {
  if (empty($notify)) {
    return FALSE;
  }
  
  module_load_include('php','commerce_alipay_f2f','include/f2fUtility');
  $utility = new f2fUtility();
  // Log an entry of the notification received for a transaction.
  watchdog('commerce_alipay_f2f', 'Customer returned from Alipay with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
  
  $notify_sign = $notify['sign'];
  
  $pubkey = $payment_method['settings']['alipay_pub_key'];
  
  $notify = drupal_get_query_parameters($notify,array('sign','sign_type'));

  
    $signdata = '';
	
	$signdata = $utility->getSignContent($notify);
	 
  
    $result = $utility->verifySign($signdata,$notify_sign,$pubkey);
 

       return (bool) $result;
}

function commerce_alipay_f2f_notify_submit($order, $payment_method, $notify) {
  // Attempt to load prior authorization capture IPN created previously.
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $notify["trade_no"]));
  if (!empty($transactions)) {
    // @TODO: Load the prior transaction ID and update with the capture values.
    // There is probably some special handling necessary in this case.
    $transaction = reset($transactions);
    
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }
  // Currently supports only transactions in CNY.
  $transaction->amount = commerce_currency_decimal_to_amount($notify['total_amount'], 'CNY');
  $transaction->currency_code = 'CNY';

  $transaction->remote_id = $notify["trade_no"];
  // Set the transaction's statuses based on notify's trade_status.
  $transaction->remote_status = $notify['trade_status'];
  $transaction->data['notify'] = $notify;

 
				
     // Handle trade types of cases.
					
    switch ($notify['trade_status']) {
      // Operation canceled.
      case 'TRADE_CLOSED':
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = commerce_alipay_f2f_status_message($notify['trade_status']);
        commerce_order_status_update($order, 'canceled');
        break;


      // Pending buyer to process payment.
      case 'WAIT_BUYER_PAY':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = commerce_alipay_f2f_status_message($notify['trade_status']);
        commerce_order_status_update($order, 'wait_buyer_pay');

      // Transaction complete.
      case 'TRADE_FINISHED':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = commerce_alipay_f2f_status_message($notify['trade_status']);

        commerce_order_status_update($order, 'completed');
        commerce_checkout_complete($order);

        break;

      // Transaction successful.
      case 'TRADE_SUCCESS':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = commerce_alipay_f2f_status_message($notify['trade_status']);
        commerce_order_status_update($order, 'completed');
        commerce_checkout_complete($order);
        break;
    }
  
  // Save the payment transaction and redirect to next page.
  commerce_payment_transaction_save($transaction);
  //commerce_payment_redirect_pane_next_page($order);
  // Record an entry of the transaction with the order and trade numbers.
  watchdog('commerce_alipay', 'Notify processed for Order @order_number with ID @trade_no.', array('@trade_no' => $notify["trade_no"], '@order_number' => $order->order_number), WATCHDOG_INFO);
}



function commerce_alipay_f2f_data_body($order) {
  if (empty($order)) {
    return '';
  }
  else {
    // Get a list of the items from the order to be paid.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $order_wrapper->commerce_line_items->value();
    foreach ($line_items as $line_item) {
      if ($line_item->type == 'product' && !empty($line_item->commerce_product)) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $body[] = $line_item_wrapper->commerce_product->title->value();
      }
    }
    return implode($body, ' | ');
  }
}

function commerce_alipay_f2f_form_alter(&$form,&$form_state,$form_id) {

  if($form_id == 'commerce_checkout_form_payment') {
	
	 $order = reset($form_state['build_info']['args']);
	 
	 if ($order->data['payment_method'] == 'alipay_f2f|commerce_payment_alipay_f2f') {

	      $form['help'] = array(
			  
			     '#type' => 'markup',
			     '#prefix' => '<div class="checkout-help">',
			     '#suffix' => '</div>',
			     '#markup' => t('Open your Alipay APP and scan the QR code above to pay for the order'),
			     
		  );
	 }
  }
}


function commerce_alipay_f2f_status_message($status) {
  switch ($status) {
    // Messages used for refund types of cases.
    case 'WAIT_SELLER_AGREE':
      return t('The refund request is waiting for seller to agree.');

    case 'REFUND_SUCCESS':
      return t('Seller agrees on the refund request.');

    // Messages used for trade types of cases.
    case 'TRADE_CLOSED':
      return t('The payment has failed. This happens only if the payment was made from your customer’s bank account.');

    case 'WAIT_SELLER_SEND_GOODS':
      return t('The payment is waiting for the seller to send goods.');

    case 'WAIT_BUYER_CONFIRM_GOODS':
      return t('Seller has already sent the goods, pending buyer to confirm.');

    case 'WAIT_BUYER_PAY':
      return t('The payment is waiting for the buyer to pay.');

    case 'TRADE_FINISHED':
      return t('The payment has completed.');

    case 'TRADE_SUCCESS':
      return t('The payment has completed.');
  }
}


